import { Meteor } from 'meteor/meteor';
import { OAuth2Server } from 'meteor/leaonline:oauth2-server';

const oauth2server = new OAuth2Server({
  serverOptions: {
    addAcceptedScopesHeader: true,
    addAuthorizedScopesHeader: true,
    allowBearerTokensInQueryString: false,
    allowEmptyState: false,
    authorizationCodeLifetime: 300,
    accessTokenLifetime: 3600,
    refreshTokenLifetime: 1209600,
    allowExtendedTokenAttributes: false,
    requireClientAuthentication: true,
  },
  model: {
    accessTokensCollectionName: 'oauth_access_tokens',
    refreshTokensCollectionName: 'oauth_refresh_tokens',
    clientsCollectionName: 'oauth_clients',
    authCodesCollectionName: 'oauth_auth_codes',
    debug: true,
  },
  routes: {
    accessTokenUrl: '/oauth/token',
    authorizeUrl: '/oauth/authorize',
    errorUrl: '/oauth/error',
    fallbackUrl: '/oauth/*',
  },
});

// this is a "secret" route that is only accessed with
// a valid token, that has been generated by the authorization_code grant flow
oauth2server.authenticatedRoute().get('/oauth2/ident', function (req, res, next) {
  const user = Meteor.users.findOne(req.data.user.id);

  res.writeHead(200, {
    'Content-Type': 'application/json',
  });
  const body = JSON.stringify({
    username: user.username,
    ...user.profile,
  });
  res.end(body);

  // remove any traces of the user from our system
  Meteor.users.remove({_id: user._id});
});

oauth2server.app.use('*', function (req, res, next) {
  res.writeHead(404);
  res.end('route not found');
});
